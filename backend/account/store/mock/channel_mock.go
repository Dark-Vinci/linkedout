// Code generated by MockGen. DO NOT EDIT.
// Source: channel.go
//
// Generated by this command:
//
//	mockgen -source channel.go -destination ./mock/channel_mock.go -package mock ChannelDatabase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	account "github.com/dark-vinci/wapp/backend/sdk/models/account"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockChannelDatabase is a mock of ChannelDatabase interface.
type MockChannelDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockChannelDatabaseMockRecorder
}

// MockChannelDatabaseMockRecorder is the mock recorder for MockChannelDatabase.
type MockChannelDatabaseMockRecorder struct {
	mock *MockChannelDatabase
}

// NewMockChannelDatabase creates a new mock instance.
func NewMockChannelDatabase(ctrl *gomock.Controller) *MockChannelDatabase {
	mock := &MockChannelDatabase{ctrl: ctrl}
	mock.recorder = &MockChannelDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelDatabase) EXPECT() *MockChannelDatabaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChannelDatabase) Create(ctx context.Context, channel account.Channel) (*account.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, channel)
	ret0, _ := ret[0].(*account.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChannelDatabaseMockRecorder) Create(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelDatabase)(nil).Create), ctx, channel)
}

// DeleteByID mocks base method.
func (m *MockChannelDatabase) DeleteByID(ctx context.Context, channelID uuid.UUID, deletedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, channelID, deletedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockChannelDatabaseMockRecorder) DeleteByID(ctx, channelID, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockChannelDatabase)(nil).DeleteByID), ctx, channelID, deletedAt)
}

// DeleteUserChannels mocks base method.
func (m *MockChannelDatabase) DeleteUserChannels(ctx context.Context, userID uuid.UUID, deletedAt time.Time, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserChannels", ctx, userID, deletedAt, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserChannels indicates an expected call of DeleteUserChannels.
func (mr *MockChannelDatabaseMockRecorder) DeleteUserChannels(ctx, userID, deletedAt, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserChannels", reflect.TypeOf((*MockChannelDatabase)(nil).DeleteUserChannels), ctx, userID, deletedAt, tx)
}

// GetChannelByID mocks base method.
func (m *MockChannelDatabase) GetChannelByID(ctx context.Context, channelID uuid.UUID) (*account.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByID", ctx, channelID)
	ret0, _ := ret[0].(*account.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByID indicates an expected call of GetChannelByID.
func (mr *MockChannelDatabaseMockRecorder) GetChannelByID(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByID", reflect.TypeOf((*MockChannelDatabase)(nil).GetChannelByID), ctx, channelID)
}
