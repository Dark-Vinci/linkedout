// Code generated by MockGen. DO NOT EDIT.
// Source: group.go
//
// Generated by this command:
//
//	mockgen -source group.go -destination ./mock/group_mock.go -package mock GroupDatabase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/dark-vinci/wapp/backend/sdk/models"
	account "github.com/dark-vinci/wapp/backend/sdk/models/account"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockGroupDatabase is a mock of GroupDatabase interface.
type MockGroupDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupDatabaseMockRecorder
}

// MockGroupDatabaseMockRecorder is the mock recorder for MockGroupDatabase.
type MockGroupDatabaseMockRecorder struct {
	mock *MockGroupDatabase
}

// NewMockGroupDatabase creates a new mock instance.
func NewMockGroupDatabase(ctrl *gomock.Controller) *MockGroupDatabase {
	mock := &MockGroupDatabase{ctrl: ctrl}
	mock.recorder = &MockGroupDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupDatabase) EXPECT() *MockGroupDatabaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupDatabase) Create(ctx context.Context, group account.Group) (*account.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, group)
	ret0, _ := ret[0].(*account.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupDatabaseMockRecorder) Create(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupDatabase)(nil).Create), ctx, group)
}

// DeleteAllUserGroup mocks base method.
func (m *MockGroupDatabase) DeleteAllUserGroup(ctx context.Context, userID uuid.UUID, deletedAt time.Time, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserGroup", ctx, userID, deletedAt, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserGroup indicates an expected call of DeleteAllUserGroup.
func (mr *MockGroupDatabaseMockRecorder) DeleteAllUserGroup(ctx, userID, deletedAt, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserGroup", reflect.TypeOf((*MockGroupDatabase)(nil).DeleteAllUserGroup), ctx, userID, deletedAt, tx)
}

// DeleteByID mocks base method.
func (m *MockGroupDatabase) DeleteByID(ctx context.Context, id uuid.UUID, deletedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, deletedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockGroupDatabaseMockRecorder) DeleteByID(ctx, id, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockGroupDatabase)(nil).DeleteByID), ctx, id, deletedAt)
}

// GetGroupByID mocks base method.
func (m *MockGroupDatabase) GetGroupByID(ctx context.Context, id uuid.UUID) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", ctx, id)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockGroupDatabaseMockRecorder) GetGroupByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockGroupDatabase)(nil).GetGroupByID), ctx, id)
}
